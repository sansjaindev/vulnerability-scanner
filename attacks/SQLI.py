import requests
from urllib.parse import urljoin
from attacks.form_functions import get_form_details, get_forms
import logging
from attacks.logger import set_logger


set_logger()
log = logging.getLogger(__name__)

s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36"

def is_vulnerable(response):
	"""
	A simple boolean function that determines whether a page 
	is SQL Injection vulnerable from its `response`
	"""
	errors = [
		"you have an error in your sql syntax;",
		"warning: mysql",
		"syntax error",
		# SQL Server
		"unclosed quotation mark after the character string",
		# Oracle
		"quoted string not properly terminated",
	]

	for error in errors:
		if error in response.content.decode().lower():
			return True
	
	return False


def sqli(url):
	"""
	Given a `url`, it returns the link of sqli vulnerable locations if any for the webpage.
	"""

	log.info(f'Recieved sql query on {url}')

	result = None
	
	for c in "\"'":
		new_url = f"{url}{c}"
		log.info(f'[!] Trying {new_url}')
		
		try:
			res = s.get(new_url)
			if is_vulnerable(res):
				log.info(f'[+] SQL Injection vulnerability detected, link: {new_url}')
				result = f"""[+] SQL Injection vulnerability detected, link: {new_url}"""
				return result
		
		except:
			continue
	
	log.info(f'[-] SQL Injection Vulnerability not detected in URL : {url}')
	forms = get_forms(url)
	if len(forms) == 0:
		exit()

	log.info('[+] Trying SQL Injection in internal forms')
	log.info(f'[+] Detected {len(forms)} forms on {url}')
	result = f'[+] Detected {len(forms)} forms on {url}\n'

	for form in forms:
		form_details = get_form_details(form)

		for c in "\"'":
			data = {}

			for input in form_details['inputs']:
				if (input['type'] != 'submit' and input['type'] != 'password'):
					data[input['name']] = f"test{c}"
				
				if input['type'] == 'password':
					data[input['name']] = 'test'

			url = urljoin(url, form_details['action'])

			if form_details['method'] == 'post':
				response = s.post(url, data=data)
			
			if form_details['method'] == 'get':
				response = s.get(url, params=data)

			if is_vulnerable(response):
				result += f"""\n[+] SQL Injection vulnerability detected, link: {url}\n"""
				log.info(f'[+] SQL Injection vulnerability detected, link: {url}')
				return result
			
	result += f"""\n[-] No SQL Injection vulnerability detected, link: {url}\n"""
	log.info(f'[-] No SQL Injection vulnerability detected, link: {url}')
	return result
